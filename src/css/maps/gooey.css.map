{"version":3,"sources":["gooey.scss","abstracts/mixins/_typography.scss","gooey.css","abstracts/functions/_sizing-functions.scss","vendor/_include-media.scss"],"names":[],"mappings":"AA6BA;EACE,cAAa;EACb,4BAA0B;EAC1B,kCAAgC;CACjC;;AAED;EACE,2BAA0B;EAC1B,wBAAuB;EACvB,oCAAkC;EAClC,oDAAmD;EACnD,4CAA2C;EAE3C,oCAAmC;EACnC,iCAAgC;EAChC,4BAA2B;EAC3B,8CAA0C;CAc3C;;AAxBD;EAaI,wBAAuB;EACvB,oCAAkC;EAElC,oCAAmC;EACnC,iCAAgC;EAChC,4BAA2B;CAC5B;;AAnBH;EAqBI,cAAa;CACd;;AAIH;EACE,wBAAuB;CAQxB;;AATD;EC7CY,gBDmDK;CC5CR;;AANG;ED4CZ;IC3CgB,oDAA+I;GAKtJ;CCmBR;;ADtBW;EDyCZ;ICxCgB,gBD+CC;GC7CR;CCyBR;;AFwBD;EACE,iBA7DM;EA8DN,aAAW;EACX,mBAAiB;EACjB,eAAc;EAEd,uBAAsB;CAQvB;;AAdD;EAUI,UAAS;EACT,SAAQ;EACR,mBAAkB;CACnB;;AAGH;EACE;IACE,WAAU;GEvBX;EF2BD;IACE,WAAU;GEzBX;CACF;;AFkCD;EACE,eAAa;CACd;;AAQD;EACE,eAAa;CACd;;AAED;EACE,6BAA2B;CAI5B;;AAED;EACE,oBArHU;EAsHV,oBAAkB;EAGlB,YGzHoC;EH0HpC,aG1HoC;EH4HpC,mBAAiB;EAGjB,aAAW;EACX,mBAAiB;EACjB,kBGjIoC;EHkIpC,gCAA4B;EAE5B,4BAA2B;EAC3B,mEAAqE;EAAE,YAAY;CACpF;;AAED;EACE,cAAY;CAEb;;AAMD;EAGE,iBGpJoC;EHqJpC,kBGrJoC;EHsJpC,kBAAgB;EAChB,eAAa;EACb,mBAAiB;EACjB,SAAO;EACP,UAAQ;EACR,yBG3JoC;EH4JpC,wBG5JoC;EH6JpC,4BAA0B;CAC3B;;AAID;EACE,sCAA8C;CAC/C;;AAED;EACE,gCAA4B;CAC7B;;AAED;EACE,qCAA6C;CAC9C;;AAED;EAEI,+CAA2C;CAC5C;;AAHH;EAKI,6DAAwD;CACzD;;AANH;EASI,+CAA2C;CAC5C;;AAGH;EAGE,+BAA8B;EAC9B,6BAA4B;EAC5B,8BAA6B;EAC7B,yBAAwB;EAExB,+DAAkE;EAAE,YAAY;EAYhF,gBAAe;EAIf,yBAAgC;EAChC,iBGpNoC;EHqNpC,WAAU;EAKV,uBAAqB;EACrB,mBG3NoC;EH4NpC,iBAAe;CAUhB;;AIuUG;EJlXJ;IAoCI,iCAAgC;IAChC,cAAa;IAEb,gBGlOkC;IHoOlC,cGpOkC;GHsOrC;CE5EA;;AF8ED;EACE;IACE,cAAa;IACb,WAAU;GE3EX;EF+ED;IACE,sBAAqB;GE7EtB;EFgFD;IACE,WAAU;IACV,iBGrPkC;IHsPlC,oBAAmB;GE9EpB;CACF;;AFsFD;EACE;IACE,WAAU;IACV,WAAU;GEnFX;EFuFD;IACE,sBAAqB;GErFtB;EFwFD;IACE,WAAU;IAEV,cG7QkC;IH8QlC,oBAAmB;GEvFpB;CACF;;AF+FD;EACE;;;;;IAKE;EAEF,oEAAmE;CAQpE;;AAhBD;EAaM,2BAAyB;CAC1B;;AAdL;EAaM,2BAAyB;CAC1B;;AAdL;EAaM,2BAAyB;CAC1B;;AAdL;EAaM,2BAAyB;CAC1B;;AAIL;EAEE,WAAS;EAET,kEAAqE;EAAE,YAAY;EACnF,2BAAyB;EAEzB,gBAAc;CACf;;AACD;;;;EAIE;AACF;EAEE,kEAAqE;EAAE,YAAY;EACnF,2BAAyB;EAEzB,0DAA0D;EAC1D,oBAAmB;CACpB;;AAED;EAEE,mEAAqE;EAAE,YAAY;CAkEpF;;AApED;EA6BQ,2BAAiE;EACjE,2CAAgG;CACjG;;AA/BP;EA6BQ,2BAAiE;EACjE,4CAAgG;CACjG;;AA/BP;EAqCQ,2BAA4C;EAC5C,2CAA+F;CAChG;;AAvCP;EAqCQ,2BAA4C;EAC5C,0CAA+F;CAChG;;AIsMH;EJ7OJ;IAkDU,2BAAiE;IAIjE,4CAA+F;GAChG;EAvDT;IAkDU,2BAAiE;IAIjE,6CAA+F;GAChG;EAvDT;IA2DU,2BAA4C;IAI5C,4CAAkG;GACnG;EAhET;IA2DU,2BAA4C;IAI5C,2CAAkG;GACnG;CE7GR;;AFgID;EAEE,uBAAsB;EACtB,gBAAc;EACd,iBAAe;EACf,mBAAkB;CAuGnB;;AA5GD;EAQI,cAAY;CACb;;AATH;EAkBI,YAFW;EAGX,YAFW;EAGX,kBAAgB;EAChB,eAAa;EACb,mBAAiB;EACjB,SAAO;EACP,UAAQ;EACR,qBAAqB;EACrB,mBAAqB;EACrB,4BAA0B;CAC3B;;AA5BH;EA+BI,sCAA8C;CAC/C;;AAhCH;EAmCI,gCAA4B;CAC7B;;AApCH;EAuCI,qCAA6C;CAC9C;;AAxCH;EA4CM,8CAA0C;CAC3C;;AA7CL;EA+CM,8CAAyC;CAC1C;;AAhDL;EAkDM,+CAA2C;CAC5C;;AAnDL;EAwDI,WAAS;EAET,kEAAqE;EAAE,YAAY;EACnF,2BAAyB;EACzB,gDAA2C;EAC3C,gBAAc;CACf;;AA9DH;EAiEI;;;;;MAKE;EAEF,oEAAmE;CAQpE;;AAhFH;EA6EQ,2BAAyB;CAC1B;;AA9EP;EA6EQ,2BAAyB;CAC1B;;AA9EP;EA6EQ,2BAAyB;CAC1B;;AA9EP;EA6EQ,2BAAyB;CAC1B;;AA9EP;EAoFI,kEAAqE;EAAE,YAAY;EACnF,2BAAyB;EAEzB,gDAA2C;EAC3C,oBAAmB;CACpB;;AAzFH;EA6FI,mEAAqE;EAAE,YAAY;CAcpF;;AA3GH;EAwGQ,oCAAyC;CAC1C;;AAzGP;EAwGQ,qCAAyC;CAC1C;;AAzGP;EAwGQ,qCAAyC;CAC1C;;AAzGP;EAwGQ,qCAAyC;CAC1C","file":"../gooey.css","sourcesContent":["//@import \"compass/css3\";\n// @import 'vars';\n// @import 'base/resets';\n\n@import 'abstracts/functions/sizing-functions';\n@import 'abstracts/functions/power-functions';\n@import 'abstracts/mixins/typography';\n@import 'vendor/include-media';\n//vars\n// $fg:#ffc107;\n$fg: #bada55;\n// $bg:#009688;\n$bg:#333;\n//$open-distance:105px;\n$open-distance: 1px;\n$menu-items:4;\n//$open-distance:105px;\n//$opening-angle:$pi*2;\n// $pi:3.14;\n// $opening-angle:$pi*2;\n\n// input[type='checkbox'] {\n\n  $breakpoints: (\n  'phone': 400px,\n  'tablet': 768px,\n  'desktop': 1024px,\n) !default;\n\ninput, textarea {\n  outline: none;\n  box-shadow:none !important;\n  border:1px solid #ccc !important;\n}\n\ninput {\n  outline-color: transparent;\n  outline: 0px !important;\n  -webkit-appearance:none !important;\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\n  tap-highlight-color: rgba(255, 255, 255, 0);\n\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n  -webkit-tap-highlight-color: rgba(0,0,0,0);\n\n  &:focus, &:hover {\n    outline: 0px !important;\n    -webkit-appearance:none !important;\n  \n    -webkit-box-shadow: none !important;\n    -moz-box-shadow: none !important;\n    box-shadow: none !important;\n  }\n  &:focus + label::before {\n    outline: none;\n  }\n\n}\n\nhtml {\n  scroll-behavior: smooth;\n  // $min-width: 600px;\n  $min-width: getBp('phone') + 100px;\n  // $max-width: 1000px;\n  $max-width: getBp('tablet');\n  $min-font: 14px;\n  $max-font: 21px;\n  @include fluid-font($min-width, $max-width, $min-font, $max-font);\n}\n\nbody{\n  background:$bg;\n  color:white;\n  text-align:center;\n  height: 1000vh;\n\n  animation: appear 1s 1;\n\n  &> svg {\n    // display: none;\n    height: 0;\n    width: 0;\n    visibility: hidden;\n  }\n}\n\n@keyframes appear {\n  0% {\n    opacity: 0;\n    // bottom: 0%;\n    // transform: translateY(100%)\n  }\n  100% {\n    opacity: 1;\n    // bottom: 13%;\n    // transform: translateY(0%)\n  }\n  // 81% {\n  //   transform: scale(1.1)\n  // }\n}\n\n\na{\n  color:inherit;\n}\n\n// h1, h2, h3, h4{\n//   margin:0;\n//   margin-bottom:10px;\n//   margin-top:10px;\n// }\n\nh1{\n  font-size:3em;\n}\n\n%goo{\n  filter:url('#shadowed-goo');\n  // filter:url('#goo');\n  // debug \n  //background:rgba(255,0,0,0.2);\n}\n\n%ball{\n  background:$fg;\n  border-radius:100%;\n  // width:80px;\n  // height:80px;\n  width: px2rem(80px);\n  height: px2rem(80px);\n  // margin-left:-40px;\n  position:absolute;\n  // position: relative;\n  // top:20px;\n  color:white;\n  text-align:center;\n  line-height: px2rem(80px);\n  transform:translate3d(0,0,0);\n  // transition:transform ease-out 150ms;\n  transition: transform 150ms;\n  transition-timing-function: cubic-bezier(0.480, -0.600, 0.345, 1.295); /* custom */\n}\n\n.menu-open{\n  display:none;\n  // opacity: 0;\n}\n\n.menu-item{\n  @extend %ball;\n}\n\n.hamburger{\n  $width: 25px;\n  $height: 3px;\n  width:px2rem($width);\n  height: px2rem($height);\n  background:white;\n  display:block;\n  position:absolute;\n  top:50%;\n  left:50%;\n  margin-left:px2rem(-$width/2);\n  margin-top:px2rem(-$height/2);\n  transition:transform 200ms;\n}\n\n$hamburger-spacing:px2rem(8px);\n\n.hamburger-1{\n  transform:translate3d(0,-$hamburger-spacing,0);\n}\n\n.hamburger-2{\n  transform:translate3d(0,0,0);\n}\n\n.hamburger-3{\n  transform:translate3d(0,$hamburger-spacing,0);\n}\n\n.menu-open:checked + .menu-open-button{\n  .hamburger-1{\n    transform:translate3d(0,0,0) rotate(405deg); \n  }\n  .hamburger-2{\n    transform:translate3d(0,0,0) scale(0.1,1) rotate(720deg);\n  }\n  .hamburger-3{\n    // transform:translate3d(0,0,0) rotate(-45deg); \n    transform:translate3d(0,0,0) rotate(315deg); \n  }\n}\n\n.menu{\n  @extend %goo;\n  // animation: appear 5s 1 infinite;\n  animation-name: move-up-appear;\n  animation-iteration-count: 1;\n  animation-play-state: running;\n  animation-duration: 1.5s;\n  // animation-delay: 1s;\n  animation-timing-function: cubic-bezier(0.90, -0.600, 0.115, 1.20); /* custom */\n  // animation-timing-function: cubic-bezier(0.480, -0.600, 0.215, 1.90); /* custom */\n  // animation-fill-mode: forwards;\n  // filter:url('#shadowed-goo');\n  // transform-origin: center;\n\n  // $height:150px;\n  // height:$height;\n  // $width:100%;\n  // width:$width;\n  // position: relative;\n  // position: absolute;\n  position: fixed;\n  // left:50%;\n  // transform: translate(-50%,0);\n  \n  left:calc(50% - #{px2rem(40px)});\n  bottom: px2rem(110px);\n  opacity: 1;\n  // margin-left:-80px; // ugly margin hack, use calc!\n  // padding-top:20px;\n  // padding-left:80px;\n  // box-sizing: content-box;\n  box-sizing:border-box;\n  font-size: px2rem(20px);\n  text-align:left;\n\n  @include media('>desktop') {\n    animation-name: move-down-appear;\n    bottom: unset;\n    // left:calc(0% - #{px2rem(-(85px * 2))});\n    left: px2rem(85px * 2);\n    // top: 10%;\n    top: px2rem(110px - 80px);\n  }\n}\n\n@keyframes move-up-appear {\n  0% {\n    bottom: -100%;\n    opacity: 0;\n    // transform: scale(1.1) // transform: translateY(100%)\n  }\n\n  81% {\n    transform: scale(1.1);\n  }\n\n  100% {\n    opacity: 1;\n    bottom: px2rem(110px);\n    transform: scale(1);\n    // transform: translateY(0%)\n  }\n\n  // 100% {\n  //   // opacity: 1;\n  // }\n}\n\n@keyframes move-down-appear {\n  0% {\n    top: -100%;\n    opacity: 0;\n    // transform: scale(1.1) // transform: translateY(100%)\n  }\n\n  81% {\n    transform: scale(1.1);\n  }\n\n  100% {\n    opacity: 1;\n    // top: 10%;\n    top: px2rem(110px - 80px);\n    transform: scale(1);\n    // transform: translateY(0%)\n  }\n\n  // 100% {\n  //   // opacity: 1;\n  // }\n}\n\n.menu-item{\n  /*\n  &:hover{\n    background:white;\n    color:$fg;\n  }\n  */\n\n  transition-timing-function:cubic-bezier(0.175, 0.885, 0.320, 1.275);\n  // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n\n  @for $i from 1 through $menu-items{\n    &:nth-child(#{$i+2}){\n      transition-duration:200ms;\n    }\n  }\n}\n\n.menu-open-button{\n  @extend %ball;\n  z-index:2;\n  // transition-timing-function:cubic-bezier(0.175, 0.885, 0.320, 1.275);\n  transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n  transition-duration:400ms;\n  // transform:scale(1.1,1.1) translate3d(0,0,0);\n  cursor:pointer;\n}\n/*\n.menu-open-button:hover{\n  transform:scale(1.2,1.2) translate3d(0,0,0);\n}\n*/\n.menu-open:checked + .menu-open-button{\n  // transition-timing-function:linear;\n  transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n  transition-duration:200ms;\n  // transform:scale(0.8,0.8) translate3d(0,0,0);\n  transform:scale(0.85,0.85) translate3d(0, px2rem(-10px),0);\n  background: #ff0000;\n}\n\n.menu-open:checked ~ .menu-item{\n  // transition-timing-function:cubic-bezier(0.165, 0.840, 0.440, 1.000);\n  transition-timing-function: cubic-bezier(0.480, -0.600, 0.345, 1.295); /* custom */\n  // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n\n\n  // @for $i from 1 through $menu-items{\n  //   @if $i <= 2 {\n  //     &:nth-child(#{$i+2}){\n  //       transition-duration: 250ms + (80ms * $i);\n  //       // transform:translate3d(80px * $i, 0, 0);\n  //       // transform:translate3d((80px * $i), (15px * $i - 10), 0);\n  //       transform:translate3d(px2rem((80px * $i)), px2rem((15px * $i - 10)), 0);\n  //     }\n  //   } @else {\n  //       &:nth-child(#{$i+2}) {\n  //       transition-duration: 250ms + (80ms*($i - 1));\n  //       // transform:translate3d(-(80px*($i - 2)), 0, 0);\n  //       transform:translate3d(px2rem(-(80px * ($i - 2))), px2rem((15px * ($i - 2) - 10)), 0);\n  //     } \n  //   }\n  // }\n  \n  @for $i from 1 through $menu-items{\n    @if $i <= 2 {\n      &:nth-child(#{$i+2}){\n        // transition-duration: 250ms + (80ms * $i);\n        // transform:translate3d(80px * $i, 0, 0);\n        // transform:translate3d((80px * $i), (15px * $i - 10), 0);\n        transition-duration: 250ms + (80ms * abs(($i + 1) - $menu-items));\n        transform:translate3d(px2rem(80 * (($i + 1) - $menu-items)), px2rem(-(15px * ($i - 3) + 10)), 0);\n      }\n    } @else {\n        &:nth-child(#{$i+2}) {\n        // transition-duration: 250ms + (80ms*($i - 1));\n        // transition-duration: 250ms + (80ms * abs(($i - 1) - $menu-items));\n        // transform:translate3d(-(80px*($i - 2)), 0, 0);\n        transition-duration: 250ms + (80ms*($i - 2));\n        transform:translate3d(px2rem(80 * (($i + 2) - $menu-items)), px2rem((15px * ($i - 2) - 10)), 0);\n      } \n    }\n  }\n\n  \n\n  @include media('>desktop') {\n    @for $i from 1 through $menu-items{\n      @if $i <= 2 {\n        &:nth-child(#{$i+2}){\n          // transition-duration: 250ms + (80ms * $i);\n          transition-duration: 250ms + (80ms * abs(($i + 1) - $menu-items));\n          // transform:translate3d(80px * $i, 0, 0);\n          // transform:translate3d((80px * $i), (15px * $i - 10), 0);\n          // transform:translate3d(px2rem((80px * $i)), px2rem(-(15px * $i - 10)), 0);\n          transform:translate3d(px2rem(80 * (($i + 1) - $menu-items)), px2rem((15px * ($i - 3) + 10)), 0);\n        }\n      } @else {\n          &:nth-child(#{$i+2}) {\n          // transition-duration: 250ms + (80ms*($i - 2));\n          transition-duration: 250ms + (80ms*($i - 2));\n\n          // transform:translate3d(-(80px*($i - 2)), 0, 0);\n          // transform:translate3d(px2rem(-(80px * ($i - 2))), px2rem(-(15px * ($i - 2) - 10)), 0);\n          transform:translate3d(px2rem(80px * (($i + 2) - $menu-items)), px2rem(-(15px * ($i - 2) - 10)), 0);\n        } \n      }\n    }\n  }\n}\n\n\n\n\n\n\n// @import 'gooey-sub';\n\n\n\n\n\n\n\n.sub-menu {\n  @extend %goo;\n  box-sizing: border-box;\n  font-size:20px;\n  text-align:left;\n  position: relative;\n\n  .menu-open2{\n    display:none;\n  }\n  \n  .menu-item2{\n    @extend %ball;\n  }\n\n  .hamburger2{\n    $width:25px;\n    $height:3px;\n    width:$width;\n    height:$height;\n    background:white;\n    display:block;\n    position:absolute;\n    top:50%;\n    left:50%;\n    margin-left:-$width/2;\n    margin-top:-$height/2;\n    transition:transform 200ms;\n  }\n\n  .hamburger-12{\n    transform:translate3d(0,-$hamburger-spacing,0);\n  }\n  \n  .hamburger-22{\n    transform:translate3d(0,0,0);\n  }\n  \n  .hamburger-32{\n    transform:translate3d(0,$hamburger-spacing,0);\n  }\n  \n  .menu-open2:checked + .menu-open-button2{\n    .hamburger-12{\n      transform:translate3d(0,0,0) rotate(45deg); \n    }\n    .hamburger-22{\n      transform:translate3d(0,0,0) scale(0.1,1);\n    }\n    .hamburger-32{\n      transform:translate3d(0,0,0) rotate(-45deg); \n    }\n  }\n\n  .menu-open-button2{\n    @extend %ball;\n    z-index:2;\n    // transition-timing-function:cubic-bezier(0.175, 0.885, 0.320, 1.275);\n    transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n    transition-duration:400ms;\n    transform:scale(1.1,1.1) translate3d(0,0,0);\n    cursor:pointer;\n  }\n\n  .menu-item2{\n    /*\n    &:hover{\n      background:white;\n      color:$fg;\n    }\n    */\n  \n    transition-timing-function:cubic-bezier(0.175, 0.885, 0.320, 1.275);\n    // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n  \n    @for $i from 1 through $menu-items{\n      &:nth-child(#{$i+2}){\n        transition-duration:200ms;\n      }\n    }\n  }\n\n  .menu-open2:checked + .menu-open-button2{\n    // transition-timing-function:linear;\n    transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n    transition-duration:200ms;\n    // transform:scale(0.8,0.8) translate3d(0,0,0);\n    transform:scale(0.8,0.8) translate3d(0,0,0);\n    background: #ff0000;\n  }\n  \n  .menu-open2:checked ~ .menu-item2{\n    // transition-timing-function:cubic-bezier(0.165, 0.840, 0.440, 1.000);\n    transition-timing-function: cubic-bezier(0.480, -0.600, 0.345, 1.295); /* custom */\n    // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\n    \n\n    \n    @for $i from 1 through $menu-items{\n      &:nth-child(#{$i+2}) {\n        //     transition-duration: 250ms + (80ms*($i - 2));\n        //     // transform:translate3d(-(80px*($i - 2)),0, 0);\n            // transform:translate3d(-(80px * ($i - 2)), -(15px * ($i - 2) - 10), 0);\n        // transform:translate3d((sin($i*2.8)) + px, -(80px * $i), 0);\n        transform:translate3d(0, -(80px * $i), 0);\n      } \n    }\n  }\n}\n\n\n","@function strip-unit($number) {\r\n    @if type-of($number)== 'number' and not unitless($number) {\r\n        @return $number / ($number * 0 + 1);\r\n    }\r\n\r\n    @return $number;\r\n}\r\n\r\n@mixin fluid-font($min-vw, $max-vw, $min-font-size, $max-font-size) {\r\n    $u1: unit($min-vw);\r\n    $u2: unit($max-vw);\r\n    $u3: unit($min-font-size);\r\n    $u4: unit($max-font-size);\r\n\r\n    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {\r\n        &   {\r\n            font-size: $min-font-size;\r\n            @media screen and (min-width: $min-vw) {\r\n                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\r\n            }\r\n            @media screen and (min-width: $max-vw) {\r\n                font-size: $max-font-size;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {\r\n  @each $property in $properties {\r\n    #{$property}: $min-value;\r\n  }\r\n\r\n  @media (min-width: $min-vw) {\r\n    @each $property in $properties {\r\n      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});\r\n    }\r\n  }\r\n\r\n  @media (min-width: $max-vw) {\r\n    @each $property in $properties {\r\n      #{$property}: $max-value;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\r\n\t& {\r\n\t\t@each $property in $properties {\r\n\t\t\t#{$property}: $min-value;\r\n\t\t}\r\n\r\n\t\t@media screen and (min-width: $min-screen) {\r\n\t\t\t@each $property in $properties {\r\n\t\t\t\t#{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value); \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@media screen and (min-width: $max-screen) {\r\n\t\t\t@each $property in $properties {\r\n\t\t\t\t#{$property}: $max-value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Requires the calc-interpolation function which can also be used independently\r\n\r\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\r\n\t$a: ($max-value - $min-value) / ($max-screen - $min-screen);\r\n\t$b: $min-value - $a * $min-screen; \r\n\r\n\t$sign: \"+\";\r\n\t@if ($b < 0) {\r\n\t\t$sign: \"-\";\r\n\t\t$b: abs($b);\r\n\t}\r\n\t@return calc(#{$a*100}vw #{$sign} #{$b});\r\n}","input, textarea {\n  outline: none;\n  box-shadow: none !important;\n  border: 1px solid #ccc !important;\n}\n\ninput {\n  outline-color: transparent;\n  outline: 0px !important;\n  -webkit-appearance: none !important;\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\n  tap-highlight-color: rgba(255, 255, 255, 0);\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\ninput:focus, input:hover {\n  outline: 0px !important;\n  -webkit-appearance: none !important;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\ninput:focus + label::before {\n  outline: none;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nhtml {\n  font-size: 14px;\n}\n\n@media screen and (min-width: 420px) {\n  html {\n    font-size: calc(14px + 7 * ((100vw - 420px) / 348));\n  }\n}\n\n@media screen and (min-width: 768px) {\n  html {\n    font-size: 21px;\n  }\n}\n\nbody {\n  background: #333;\n  color: white;\n  text-align: center;\n  height: 1000vh;\n  animation: appear 1s 1;\n}\n\nbody > svg {\n  height: 0;\n  width: 0;\n  visibility: hidden;\n}\n\n@keyframes appear {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\na {\n  color: inherit;\n}\n\nh1 {\n  font-size: 3em;\n}\n\n.menu, .sub-menu {\n  filter: url(\"#shadowed-goo\");\n}\n\n.menu-item, .menu-open-button, .sub-menu .menu-item2, .sub-menu .menu-open-button2 {\n  background: #bada55;\n  border-radius: 100%;\n  width: 5rem;\n  height: 5rem;\n  position: absolute;\n  color: white;\n  text-align: center;\n  line-height: 5rem;\n  transform: translate3d(0, 0, 0);\n  transition: transform 150ms;\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.345, 1.295);\n  /* custom */\n}\n\n.menu-open {\n  display: none;\n}\n\n.hamburger {\n  width: 1.5625rem;\n  height: 0.1875rem;\n  background: white;\n  display: block;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -0.78125rem;\n  margin-top: -0.09375rem;\n  transition: transform 200ms;\n}\n\n.hamburger-1 {\n  transform: translate3d(0, -0.5rem, 0);\n}\n\n.hamburger-2 {\n  transform: translate3d(0, 0, 0);\n}\n\n.hamburger-3 {\n  transform: translate3d(0, 0.5rem, 0);\n}\n\n.menu-open:checked + .menu-open-button .hamburger-1 {\n  transform: translate3d(0, 0, 0) rotate(405deg);\n}\n\n.menu-open:checked + .menu-open-button .hamburger-2 {\n  transform: translate3d(0, 0, 0) scale(0.1, 1) rotate(720deg);\n}\n\n.menu-open:checked + .menu-open-button .hamburger-3 {\n  transform: translate3d(0, 0, 0) rotate(315deg);\n}\n\n.menu {\n  animation-name: move-up-appear;\n  animation-iteration-count: 1;\n  animation-play-state: running;\n  animation-duration: 1.5s;\n  animation-timing-function: cubic-bezier(0.9, -0.6, 0.115, 1.2);\n  /* custom */\n  position: fixed;\n  left: calc(50% - 2.5rem);\n  bottom: 6.875rem;\n  opacity: 1;\n  box-sizing: border-box;\n  font-size: 1.25rem;\n  text-align: left;\n}\n\n@media (min-width: 1025px) {\n  .menu {\n    animation-name: move-down-appear;\n    bottom: unset;\n    left: 10.625rem;\n    top: 1.875rem;\n  }\n}\n\n@keyframes move-up-appear {\n  0% {\n    bottom: -100%;\n    opacity: 0;\n  }\n  81% {\n    transform: scale(1.1);\n  }\n  100% {\n    opacity: 1;\n    bottom: 6.875rem;\n    transform: scale(1);\n  }\n}\n\n@keyframes move-down-appear {\n  0% {\n    top: -100%;\n    opacity: 0;\n  }\n  81% {\n    transform: scale(1.1);\n  }\n  100% {\n    opacity: 1;\n    top: 1.875rem;\n    transform: scale(1);\n  }\n}\n\n.menu-item {\n  /*\n  &:hover{\n    background:white;\n    color:$fg;\n  }\n  */\n  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n\n.menu-item:nth-child(3) {\n  transition-duration: 200ms;\n}\n\n.menu-item:nth-child(4) {\n  transition-duration: 200ms;\n}\n\n.menu-item:nth-child(5) {\n  transition-duration: 200ms;\n}\n\n.menu-item:nth-child(6) {\n  transition-duration: 200ms;\n}\n\n.menu-open-button {\n  z-index: 2;\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.515, 1.58);\n  /* custom */\n  transition-duration: 400ms;\n  cursor: pointer;\n}\n\n/*\n.menu-open-button:hover{\n  transform:scale(1.2,1.2) translate3d(0,0,0);\n}\n*/\n.menu-open:checked + .menu-open-button {\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.515, 1.58);\n  /* custom */\n  transition-duration: 200ms;\n  transform: scale(0.85, 0.85) translate3d(0, -0.625rem, 0);\n  background: #ff0000;\n}\n\n.menu-open:checked ~ .menu-item {\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.345, 1.295);\n  /* custom */\n}\n\n.menu-open:checked ~ .menu-item:nth-child(3) {\n  transition-duration: 410ms;\n  transform: translate3d(-10rem, 1.25rem, 0);\n}\n\n.menu-open:checked ~ .menu-item:nth-child(4) {\n  transition-duration: 330ms;\n  transform: translate3d(-5rem, 0.3125rem, 0);\n}\n\n.menu-open:checked ~ .menu-item:nth-child(5) {\n  transition-duration: 330ms;\n  transform: translate3d(5rem, 0.3125rem, 0);\n}\n\n.menu-open:checked ~ .menu-item:nth-child(6) {\n  transition-duration: 410ms;\n  transform: translate3d(10rem, 1.25rem, 0);\n}\n\n@media (min-width: 1025px) {\n  .menu-open:checked ~ .menu-item:nth-child(3) {\n    transition-duration: 410ms;\n    transform: translate3d(-10rem, -1.25rem, 0);\n  }\n  .menu-open:checked ~ .menu-item:nth-child(4) {\n    transition-duration: 330ms;\n    transform: translate3d(-5rem, -0.3125rem, 0);\n  }\n  .menu-open:checked ~ .menu-item:nth-child(5) {\n    transition-duration: 330ms;\n    transform: translate3d(5rem, -0.3125rem, 0);\n  }\n  .menu-open:checked ~ .menu-item:nth-child(6) {\n    transition-duration: 410ms;\n    transform: translate3d(10rem, -1.25rem, 0);\n  }\n}\n\n.sub-menu {\n  box-sizing: border-box;\n  font-size: 20px;\n  text-align: left;\n  position: relative;\n}\n\n.sub-menu .menu-open2 {\n  display: none;\n}\n\n.sub-menu .hamburger2 {\n  width: 25px;\n  height: 3px;\n  background: white;\n  display: block;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -12.5px;\n  margin-top: -1.5px;\n  transition: transform 200ms;\n}\n\n.sub-menu .hamburger-12 {\n  transform: translate3d(0, -0.5rem, 0);\n}\n\n.sub-menu .hamburger-22 {\n  transform: translate3d(0, 0, 0);\n}\n\n.sub-menu .hamburger-32 {\n  transform: translate3d(0, 0.5rem, 0);\n}\n\n.sub-menu .menu-open2:checked + .menu-open-button2 .hamburger-12 {\n  transform: translate3d(0, 0, 0) rotate(45deg);\n}\n\n.sub-menu .menu-open2:checked + .menu-open-button2 .hamburger-22 {\n  transform: translate3d(0, 0, 0) scale(0.1, 1);\n}\n\n.sub-menu .menu-open2:checked + .menu-open-button2 .hamburger-32 {\n  transform: translate3d(0, 0, 0) rotate(-45deg);\n}\n\n.sub-menu .menu-open-button2 {\n  z-index: 2;\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.515, 1.58);\n  /* custom */\n  transition-duration: 400ms;\n  transform: scale(1.1, 1.1) translate3d(0, 0, 0);\n  cursor: pointer;\n}\n\n.sub-menu .menu-item2 {\n  /*\n    &:hover{\n      background:white;\n      color:$fg;\n    }\n    */\n  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n\n.sub-menu .menu-item2:nth-child(3) {\n  transition-duration: 200ms;\n}\n\n.sub-menu .menu-item2:nth-child(4) {\n  transition-duration: 200ms;\n}\n\n.sub-menu .menu-item2:nth-child(5) {\n  transition-duration: 200ms;\n}\n\n.sub-menu .menu-item2:nth-child(6) {\n  transition-duration: 200ms;\n}\n\n.sub-menu .menu-open2:checked + .menu-open-button2 {\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.515, 1.58);\n  /* custom */\n  transition-duration: 200ms;\n  transform: scale(0.8, 0.8) translate3d(0, 0, 0);\n  background: #ff0000;\n}\n\n.sub-menu .menu-open2:checked ~ .menu-item2 {\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.345, 1.295);\n  /* custom */\n}\n\n.sub-menu .menu-open2:checked ~ .menu-item2:nth-child(3) {\n  transform: translate3d(0, -80px, 0);\n}\n\n.sub-menu .menu-open2:checked ~ .menu-item2:nth-child(4) {\n  transform: translate3d(0, -160px, 0);\n}\n\n.sub-menu .menu-open2:checked ~ .menu-item2:nth-child(5) {\n  transform: translate3d(0, -240px, 0);\n}\n\n.sub-menu .menu-open2:checked ~ .menu-item2:nth-child(6) {\n  transform: translate3d(0, -320px, 0);\n}\n","@function strip-unit($number) {\r\n    @if type-of($number) == 'number' and not unitless($number) {\r\n        @return $number / ($number * 0 + 1);\r\n    }\r\n    @return $number;\r\n}\r\n\r\n@function px2rem($px, $root-px: 16) {\r\n    $value: strip-unit($px);\r\n    $root-value: strip-unit($root-px);\r\n    @return $value / $root-value + rem;\r\n}\r\n\r\n@function converter($val, $mp-val: 1, $mp: 1, $unit: null) {\r\n    $value: strip-unit($val);\r\n    $divider: strip-unit($mp-val);\r\n    @if $unit == null {\r\n        $unit: '';\r\n    }\r\n\r\n    @if $divider == 0 {\r\n        $divider: 1\r\n    }\r\n\r\n    @if $divider < 0 {\r\n        @return unquote($value / $divider + $unit);\r\n    } @else {\r\n        @return unquote($value * $divider + $unit);\r\n    }\r\n}\r\n\r\n@function to-unit($val, $unit: null) {\r\n    // @if type-of($unit) not 'string' and {\r\n    @if $unit and unitless($val) and type-of($val) == 'number' {\r\n        // @return strip-unit($val) + #{$unit};\r\n        @return unquote(strip-unit($val) + $unit);\r\n    }\r\n    \r\n    @return $val;\r\n}\r\n\r\n@mixin square-element($size) {\r\n    @if ($size == null) or (type-of($size) != number) {\r\n        @warn 'should be a number';\r\n    } \r\n    max-width: $size; \r\n    min-height: $size;\r\n}\r\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px,\n) !default;\n\n@function getBp($bp) {\n  @if not map-has-key($map: $breakpoints, $key: $bp) {\n    @warn 'Breakpoint not found. Breakpoints available: #{map-keys($map: $breakpoints)}.';\n    @return $bp;\n  }\n  @return map-get($map: $breakpoints, $key: #{$bp});\n}\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}