{"version":3,"sources":["<no source>","abstracts/variables/_variables.scss","abstracts/placeholders/_placeholders.scss","abstracts/mixins/_grid.scss","base/_resets.scss","abstracts/mixins/_typography.scss","style.css","components/_nav.scss","abstracts/functions/_sizing-functions.scss","vendor/_include-media.scss","abstracts/functions/_color-functions.scss","_footer.scss","abstracts/mixins/_grid-claus-edition.scss","_cards.scss"],"names":[],"mappings":"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","file":"../style.css","sourcesContent":[null,"// /**************************************************\r\n// Generel variables for framework\r\n// ***************************************************/\r\n\r\n// Getting fonts\r\n\r\n// Imports are now handled by font-magician\r\n// @import url('https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700');\r\n\r\n//\r\n// SCSS VARS_____________________\r\n//\r\n// Fonts and fallbacks\r\n// $main-font: 'Noto Color Emoji', sans-serif;\r\n$main-font: 'Noto Color Emoji', 'Noto Sans', sans-serif;\r\n// $main-font: 'Open Sans', sans-serif;\r\n// $main-font: 'Crimson Text', sans-serif;\r\n\r\n// Core Colors.\r\n// tc = Theme Color;\r\n$tc-ubuntu-orange: #E95420;\r\n$tc-white: #FFF;\r\n$tc-black: #000;\r\n\r\n// Supporting colors\r\n$tc-light-aubergine: #77216F;\r\n$tc-mid-aubergine: #5E2750;\r\n$tc-dark-aubergine: #2C001E;\r\n\r\n// Neutral colors\r\n$tc-warm-grey: #AEA79F;\r\n$tc-cool-grey: #333;\r\n$tc-txt-grey: #111;\r\n\r\n\r\n$kid-color-theme: (\r\n    '1': #2BA8FF,\r\n    '2': #0AE80C,\r\n    '3': #FFCD17,\r\n    '4': #E8290A,\r\n    '5': #7208FF\r\n);\r\n\r\n$kid-color-theme2: (\r\n    '1': #147EEE,\r\n    '2': #141414,\r\n    '3': #E7E7E7,\r\n    '4': #14EE7E,\r\n    '5': #EE1414\r\n);\r\n\r\n$kid-color-theme3: (\r\n    '1': #F76726,\r\n    '2': #3CA8FF,\r\n    '3': #FFED2B,\r\n    '4': #13C2C9,\r\n    '5': #FB3656\r\n);\r\n\r\n$kid-color-theme-menu: (\r\n\r\n);\r\n\r\n@function kidColor($key, $color-map: $kid-color-theme) {\r\n    @if not map-has-key($color-map, $key) {\r\n        @warn 'no color with that name found.';\r\n        @return deeppink;\r\n    } @else {\r\n        @return map-get($color-map, $key);\r\n    }\r\n}\r\n\r\n$color-theme: (\r\n    prim1: $tc-ubuntu-orange,\r\n    prim2: $tc-white,\r\n    prim3: $tc-black,\r\n    sec1: $tc-light-aubergine,\r\n    sec2: $tc-mid-aubergine,\r\n    sec3: $tc-dark-aubergine,\r\n    tri1: $tc-warm-grey,\r\n    tri2: $tc-cool-grey,\r\n    tri3: $tc-txt-grey\r\n);\r\n\r\n\r\n// $color-theme: (\r\n//     prim1: $tc-ubuntu-orange,\r\n//     prim2: $tc-white,\r\n//     prim3: $tc-black,\r\n//     sec1: $tc-light-aubergine,\r\n//     sec2: $tc-mid-aubergine,\r\n//     sec3: $tc-dark-aubergine,\r\n//     tri1: $tc-warm-grey,\r\n//     tri2: $tc-cool-grey,\r\n//     tri3: $tc-txt-grey\r\n// );\r\n\r\n\r\n//SET STYLES\r\n//Color theme\r\n$color__primary: #111;\r\n$color__secoundary: #333;\r\n$color__tertiary: #f1f1f1;\r\n\r\n//Font theme\r\n$font__primary: 'Roboto', sans-serif;\r\n$font__secoundary: '\"Open sans\"', sans-serif;\r\n\r\n\r\n//CHANGE STYLES\r\n\r\n//Headings/h1, h2, h3..\r\n//h1\r\n$heading__font: $font__secoundary;\r\n$heading__font-weight: 300;\r\n$heading__color: $color__tertiary;\r\n\r\n//h2\r\n$heading2__font: $font__secoundary;\r\n$heading2__font-weight: 300;\r\n$heading2__color: $color__tertiary;\r\n\r\n//h3\r\n$heading3__font: $font__secoundary;\r\n$heading3__font-weight: 300;\r\n$heading3__color: $color__tertiary;\r\n\r\n//h4\r\n$heading4__font: $font__secoundary;\r\n$heading4__font-weight: 300;\r\n$heading4__color: $color__tertiary;\r\n\r\n//paragraph/p\r\n$paragraph__font: $font__primary;\r\n$paragraph__font-weight: 300;\r\n$paragraph__color: $color__secoundary;\r\n\r\n//Padding & margins\r\n//Spacings\r\n$spacing: 2.2rem;\r\n$smallspacing: 2rem;\r\n\r\n//Paddings\r\n$padding__botton: 1rem 2rem;\r\n$padding__botton-sm: 0.5rem 1rem;\r\n$padding__botton-xs: 0.25rem 0.5rem;\r\n\r\n//Margins\r\n$smallmargin: 1rem;\r\n$margin: 2rem;\r\n\r\n//Border-radius\r\n$cards__border-radius: .2rem;\r\n\r\n// @function get-color($key) {\r\n//     @if not map-has-key($color-theme, $key) {\r\n//         @warn 'no color with that name found.';\r\n//         @return deeppink;\r\n//     } @else {\r\n//         @return map-get($color-theme, $key);\r\n//     }\r\n// }\r\n\r\n\r\n$breakpoints: (\r\n    'phone': 400px,\r\n    'tablet': 768px,\r\n    'desktop': 1024px\r\n);\r\n// ) !default;\r\n\r\n$gridcontainer-exists: true;\r\n\r\n$debug: true;\r\n\r\n/*\r\nRoot vars. STANDARD FONTS AND COLORS \r\n*/\r\n// :root {\r\n//     // /* FONTS AND FALLBACKS */\r\n    \r\n    \r\n//     // /* Calculation */\r\n//     // --respaonsive: calc((var(--min-font) * 1px) + (var(--max-font) - var(--min-font)) * ((100vw - 100px) / (1200 - 100))); /* Ranges from 421px to 1199px */\r\n// }\r\n","// figure img\r\nfigure {\r\n    width: 100%;\r\n    height: auto;\r\n    padding: 0;\r\n    margin: 0;\r\n\r\n    img {\r\n        width: 100%;\r\n        max-width: 100%;\r\n        height: auto;\r\n        padding: 0;\r\n        margin: 0;\r\n        object-fit: contain;\r\n    }\r\n}\r\n\r\n%button {\r\n    display: inline-block;\r\n    text-align: center;\r\n    // padding: calc(8px + 0.1vw) calc(16px + 0.5vw);\r\n    padding: .5rem 1rem;\r\n    color: white;\r\n    // border-radius: calc(3px + 0.1vw);\r\n    border-radius: $cards__border-radius;\r\n    cursor: pointer;\r\n    // border: 1px solid rgba(0,0,0,.3);\r\n    border: none;\r\n    letter-spacing: .1rem;\r\n    text-decoration: none;\r\n    outline: none;\r\n    font-weight: 300;\r\n    // box-shadow: 0px 2px 5px 2px rgba(0,0,0,.1);\r\n}\r\n\r\n%button-outline {\r\n    display: inline-block;\r\n    text-align: center;\r\n    // padding: 8px 16px;\r\n    padding: px2rem(8px) px2rem(16px);\r\n    // padding: calc(8px + 0.1vw) calc(16px + 0.5vw);\r\n    // border-radius: calc(3px + 0.1vw);\r\n    // border-radius: 3px;\r\n    border-radius: px2rem(3px);\r\n    cursor: pointer;\r\n    // border: 1px solid rgba(0,0,0,.4);\r\n    border: px2rem(1px) solid rgba(0,0,0,.4);\r\n    font-weight: 300;\r\n    // opacity: .6;\r\n    // border: none;\r\n    // letter-spacing: 1px;\r\n    text-decoration: none;\r\n}\r\n\r\n%row {\r\n    @include is-grid-container('minmax(3vw, 1fr) minmax(auto, 1200px) minmax(3vw, 1fr)');\r\n    width: 100%;\r\n}","// /**************************************************\r\n// Grid mixins \r\n// v.1.7\r\n// ***************************************************/\r\n// SCSS CSS Grid \r\n\r\n\r\n////\r\n/// This is a poster comment.\r\n/// It will apply annotations to all items from file.\r\n/// @author Michael Koch\r\n/// @group Grid\r\n////\r\n\r\n\r\n/// Default variable to write/read check if root\r\n/// grid container exist.\r\n/// Feel very free to override in other files.\r\n/// @author Michael Koch\r\n$gridcontainer-exists: false !default;\r\n\r\n\r\n/// Mixin to define a grid container\r\n/// @author Michael Koch\r\n/// @param {Column specs} $col-spec - Number of columns and spec\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec. For no row parse null.\r\n@mixin is-grid-container($col-spec, $row-spec: null) {\r\n    \r\n    display: grid;\r\n    @if $row-spec==null {\r\n        grid-template-columns: unquote(inspect($col-spec));\r\n    }@else {\r\n        grid-template-columns: unquote(inspect($col-spec));\r\n        grid-template-rows: unquote(inspect($row-spec));\r\n    }\r\n    \r\n    // Check if a root grid container exist\r\n    @if $gridcontainer-exists == false {\r\n        // Set up box model for root grid container\r\n        box-sizing: border-box;\r\n\r\n        // Make all child elements inherit the box model\r\n        & *,\r\n        *::before,\r\n        *::after {\r\n            box-sizing: border-box;\r\n        }\r\n        $gridcontainer-exists: true !global;\r\n    }\r\n    @content;\r\n}\r\n\r\n/// Shorthand mixin to define a grid container\r\n/// @author Michael Koch\r\n/// @param {Column specs} $col-spec - Number of columns and spec\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec. For no row parse null.\r\n/// @alias is-grid-container\r\n@mixin igc($col-spec, $row-spec: null) {\r\n    @include is-grid-container($col-spec, $row-spec);\r\n    @content;\r\n}\r\n\r\n/// Mixin to make a grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column specs} $col-spec - Number of columns and spec\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec. For no row parse null.\r\n@mixin make-grid-container($selector, $col-spec, $row-spec: null) {\r\n    @if type-of($selector) !=string {\r\n        @warn '1st parameter should be a selector name (e.g: .container), and therefore a string.';\r\n    }\r\n\r\n    #{$selector} {\r\n        @include is-grid-container($col-spec, $row-spec) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make a grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column specs} $col-spec - Number of columns and spec\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec. For no row parse null.\r\n/// @alias make-grid-container\r\n@mixin mgc($selector, $col-spec, $row-spec: null) {\r\n    @include make-grid-container($selector, $col-spec, $row-spec) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Mixin to define a grid item\r\n/// @author Michael Koch\r\n/// @param {Column span} $col-span - Row placement in outer grid\r\n/// @param {Row span} $row-span [null] - Column placement in outer grid. For no row parse null.\r\n@mixin is-grid-item($col-span, $row-span: null) {\r\n    @if $row-span==null {\r\n        grid-column: unquote(inspect($col-span));\r\n    } @else {\r\n        grid-column: unquote(inspect($col-span));\r\n        grid-row: unquote(inspect($row-span));\r\n    }\r\n    @content;\r\n}\r\n\r\n/// Shorthand mixin to define a grid item\r\n/// @author Michael Koch\r\n/// @param {Column span} $col-span - Row placement in outer grid\r\n/// @param {Row span} $row-span [null] - Column placement in outer grid. For no row parse null.\r\n/// @alias is-grid-item\r\n@mixin igi($col-span, $row-span: null) {\r\n    @include is-grid-item($col-span, $row-span);\r\n    @content;\r\n}\r\n\r\n/// Mixin to make a grid item\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column span} $col-span - Row placement in outer grid\r\n/// @param {Row span} $row-span [null] - Column placement in outer grid. For no row parse null.\r\n@mixin make-grid-itam($selector, $col-span, $row-span: null) {\r\n    @if type-of($selector) !=string {\r\n        @warn '1st parameter should be a selector name (e.g: .container), and therefore a string.';\r\n    }\r\n\r\n    #{$selector} {\r\n        @include is-grid-item($col-span, $row-span) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make a grid item\r\n/// @author Michael Koch\r\n/// @param {Column span} $col-span - Row placement in outer grid\r\n/// @param {Row span} $row-span [null] - Column placement in outer grid. For no row parse null.\r\n/// @alias make-grid-itam\r\n@mixin mgi($selector, $col-span, $row-span: null) {\r\n    @include make-grid-itam($selector, $col-span, $row-span) {\r\n        @content;\r\n    }\r\n}\r\n\r\n/// Mixin to define a sub grid container\r\n/// @author Michael Koch\r\n/// @param {Column span} $col-span - Column placement in outer grid\r\n/// @param {Row span} $row-span - Row placement in outer grid\r\n/// @param {Column specs} $row-spec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n@mixin is-sub-grid-container($col-span, $row-span, $col-spec, $row-spec: null) {\r\n    @include is-grid-container($col-spec, $row-spec);\r\n    @include is-grid-item($col-span, $row-span);\r\n    @content;\r\n}\r\n\r\n/// Shorthand mixin to define a sub grid container\r\n/// @author Michael Koch\r\n/// @param {Column span} $col-span - Column placement in outer grid\r\n/// @param {Row span} $row-span - Row placement in outer grid\r\n/// @param {Column specs} $row-spec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n/// @alias is-sub-grid-container\r\n@mixin isgc($col-span, $row-span, $col-spec, $row-spec: null) {\r\n    @include is-sub-grid-container($col-span, $row-span, $col-spec, $row-spec);\r\n    @content;\r\n}\r\n\r\n/// Mixin to make a sub grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column span} $col-span - Column placement in outer grid\r\n/// @param {Row span} $row-span - Row placement in outer grid\r\n/// @param {Column specs} $row-spec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n@mixin make-sub-grid-container($selector, $col-span, $row-span, $col-spec, $row-spec: null) {\r\n    @include make-grid-itam($selector, $col-span, $row-span) {\r\n        @include is-grid-container($col-spec, $row-spec) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/// Shorthand mixin to make a sub grid container class\r\n/// @author Michael Koch\r\n/// @param {string} $selector - Selector to make. e.g class, ID, type etc.\r\n/// @param {Column span} $col-span - Column placement in outer grid\r\n/// @param {Row span} $row-span - Row placement in outer grid\r\n/// @param {Column specs} $row-spec - Number of column and spec in inner grid.\r\n/// @param {Row specs} $row-spec [null] - Number of rows and spec in inner grid. For no row parse null.\r\n/// @alias make-sub-grid-container\r\n@mixin msgc($selector, $col-span, $row-span, $col-spec, $row-spec: null) {\r\n    @include make-sub-grid-container($selector, $col-span, $row-span, $col-spec, $row-spec) {\r\n        @content;\r\n    }\r\n}\r\n\r\n$grid-index: (  \r\n    2tm: 899, \r\n    2tl: 1, \r\n    dropdown: 210,\r\n    navigation: 205,\r\n    main-header: 200,\r\n    gridcontainer: 90,\r\n    teaser: 60,\r\n    info-text: 50, \r\n    bg-image: 40, \r\n    test3: 'span 4', \r\n    test: '1 / 13', \r\n    test1: '1 / 55', \r\n    test2: '1 / 14'\r\n) !default;\r\n\r\n@function get-grid($key) {\r\n    // @return unquote(map-get($grid-index, $key));\r\n    @if not map-has-key($grid-index, $key) {\r\n        // @warn \"Key `#{$key}` not found. Keys are: '#{map-keys($map: $z-index)}\"; // My compiler doesn't care for warnings, throw error.\r\n        @error 'Key `#{$key}` not found. Keys are: '#{map-keys($map: $grid-index)}'';\r\n    }\r\n    @return unquote(inspect(map-get($grid-index, $key)));\r\n}\r\n\r\n@mixin get-grid($key) {\r\n    grid-column: get-grid($key);\r\n}\r\n","html {\r\n    $min-width: getBp('tablet');\r\n    $max-width: getBp('desktop');\r\n    line-height: 1.5;\r\n    $min-width: 756px;\r\n    $max-width: 1200px;\r\n    // $max-width: 1500px;\r\n    $max-width: 1500px;\r\n    $min-font: 14px;\r\n    $max-font: 20px;\r\n    @include fluid-font($min-width, $max-width, $min-font, $max-font);\r\n    box-sizing: border-box;\r\n    scroll-behavior: smooth;\r\n}\r\n\r\nbody {\r\n    font-family: $font__primary;\r\n    padding: 0;\r\n    margin: 0;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-font-smoothing: antialiased;\r\n    text-rendering: optimizeLegibility;\r\n    font-smooth: auto;\r\n}\r\n\r\n*,\r\n:before,\r\n:after {\r\n    box-sizing: inherit;\r\n}\r\n\r\nh1 {\r\n    font-family: $heading__font;\r\n    font-weight: $heading__font-weight;\r\n    color: $heading__color;\r\n    margin: .67em 0 .34em 0 // margin: .67em 0 calc(0.67em / 2) 0\r\n}\r\n\r\nh2 {\r\n    font-family: $heading2__font;\r\n    font-weight: $heading2__font-weight;\r\n    color: $heading2__color;\r\n    margin: .75em 0 .38em 0 // margin: .75em 0 calc(0.75em / 2) 0\r\n}\r\n\r\nh3 {\r\n    font-family: $heading3__font;\r\n    font-weight: $heading3__font-weight;\r\n    color: $heading3__color;\r\n    margin: .83em 0 .42em 0 // margin: .83em 0 calc(0.83em / 2) 0\r\n}\r\n\r\nh4 {\r\n    font-family: $heading4__font;\r\n    font-weight: $heading4__font-weight;\r\n    color: $heading4__color;\r\n    margin: 1.12em 0 .57em 0 // margin: 1.12em 0 calc(1.12em / 2) 0\r\n}\r\n\r\n// h5 {\r\n//     font-family: $heading5__font;\r\n//     font-weight: $heading5__font-weight;\r\n//     color: $heading5__color;\r\n//     margin: 1.5em 0 .75em 0\r\n// }\r\n\r\n// h6 {\r\n//     font-family: $heading6__font;\r\n//     font-weight: $heading6__font-weight;\r\n//     color: $heading6__color;\r\n//     margin: 1.67em 0 .84em 0\r\n// }\r\n// h1, h2, h3, h4, h5, h6 {\r\n//     color: $text-heading;\r\n//     font-weight: 400;\r\n// }\r\n\r\np {\r\n    font-family: $paragraph__font;\r\n    font-weight: $paragraph__font-weight;\r\n    color: $paragraph__color;\r\n}\r\n\r\nul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none\r\n}\r\n\r\na {\r\n    color: inherit;\r\n    text-decoration: none;\r\n}\r\n\r\nfigure {\r\n    width: 100%;\r\n    height: auto;\r\n    padding: 0;\r\n    margin: 0;\r\n\r\n    img {\r\n        width: 100%;\r\n        max-width: 100%;\r\n        height: auto;\r\n        object-fit: contain;\r\n    }\r\n}\r\n\r\n.row {\r\n    @extend %row;\r\n}","@function strip-unit($number) {\r\n    @if type-of($number)== 'number' and not unitless($number) {\r\n        @return $number / ($number * 0 + 1);\r\n    }\r\n\r\n    @return $number;\r\n}\r\n\r\n@mixin fluid-font($min-vw, $max-vw, $min-font-size, $max-font-size) {\r\n    $u1: unit($min-vw);\r\n    $u2: unit($max-vw);\r\n    $u3: unit($min-font-size);\r\n    $u4: unit($max-font-size);\r\n\r\n    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {\r\n        &   {\r\n            font-size: $min-font-size;\r\n            @media screen and (min-width: $min-vw) {\r\n                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\r\n            }\r\n            @media screen and (min-width: $max-vw) {\r\n                font-size: $max-font-size;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {\r\n  @each $property in $properties {\r\n    #{$property}: $min-value;\r\n  }\r\n\r\n  @media (min-width: $min-vw) {\r\n    @each $property in $properties {\r\n      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});\r\n    }\r\n  }\r\n\r\n  @media (min-width: $max-vw) {\r\n    @each $property in $properties {\r\n      #{$property}: $max-value;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\r\n\t& {\r\n\t\t@each $property in $properties {\r\n\t\t\t#{$property}: $min-value;\r\n\t\t}\r\n\r\n\t\t@media screen and (min-width: $min-screen) {\r\n\t\t\t@each $property in $properties {\r\n\t\t\t\t#{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value); \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@media screen and (min-width: $max-screen) {\r\n\t\t\t@each $property in $properties {\r\n\t\t\t\t#{$property}: $max-value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Requires the calc-interpolation function which can also be used independently\r\n\r\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\r\n\t$a: ($max-value - $min-value) / ($max-screen - $min-screen);\r\n\t$b: $min-value - $a * $min-screen; \r\n\r\n\t$sign: \"+\";\r\n\t@if ($b < 0) {\r\n\t\t$sign: \"-\";\r\n\t\t$b: abs($b);\r\n\t}\r\n\t@return calc(#{$a*100}vw #{$sign} #{$b});\r\n}","/*\r\nRoot vars. STANDARD FONTS AND COLORS \r\n*/\nfigure {\n  width: 100%;\n  height: auto;\n  padding: 0;\n  margin: 0;\n}\n\nfigure img {\n  width: 100%;\n  max-width: 100%;\n  height: auto;\n  padding: 0;\n  margin: 0;\n  object-fit: contain;\n}\n\n.footer form input[type=submit], .card__button {\n  display: inline-block;\n  text-align: center;\n  padding: .5rem 1rem;\n  color: white;\n  border-radius: 0.2rem;\n  cursor: pointer;\n  border: none;\n  letter-spacing: .1rem;\n  text-decoration: none;\n  outline: none;\n  font-weight: 300;\n}\n\n.row {\n  display: grid;\n  grid-template-columns: minmax(3vw, 1fr) minmax(auto, 1200px) minmax(3vw, 1fr);\n  width: 100%;\n}\n\nhtml {\n  line-height: 1.5;\n  box-sizing: border-box;\n  scroll-behavior: smooth;\n}\n\nhtml {\n  font-size: 14px;\n}\n\n@media screen and (min-width: 756px) {\n  html {\n    font-size: calc(14px + 6 * ((100vw - 756px) / 744));\n  }\n}\n\n@media screen and (min-width: 1500px) {\n  html {\n    font-size: 20px;\n  }\n}\n\nbody {\n  font-family: \"Roboto\", sans-serif;\n  padding: 0;\n  margin: 0;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  font-smooth: auto;\n}\n\n*,\n:before,\n:after {\n  box-sizing: inherit;\n}\n\nh1 {\n  font-family: '\"Open sans\"', sans-serif;\n  font-weight: 300;\n  color: #f1f1f1;\n  margin: 0.67em 0 0.34em 0;\n}\n\nh2 {\n  font-family: '\"Open sans\"', sans-serif;\n  font-weight: 300;\n  color: #f1f1f1;\n  margin: 0.75em 0 0.38em 0;\n}\n\nh3 {\n  font-family: '\"Open sans\"', sans-serif;\n  font-weight: 300;\n  color: #f1f1f1;\n  margin: 0.83em 0 0.42em 0;\n}\n\nh4 {\n  font-family: '\"Open sans\"', sans-serif;\n  font-weight: 300;\n  color: #f1f1f1;\n  margin: 1.12em 0 0.57em 0;\n}\n\np {\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 300;\n  color: #333;\n}\n\nul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\nfigure {\n  width: 100%;\n  height: auto;\n  padding: 0;\n  margin: 0;\n}\n\nfigure img {\n  width: 100%;\n  max-width: 100%;\n  height: auto;\n  object-fit: contain;\n}\n\n.filler {\n  height: 100vh;\n}\n\n.navbar li, .navbar__open-button {\n  background-color: #13C2C9;\n  border-radius: 100%;\n  width: 5rem;\n  height: 5rem;\n  position: absolute;\n  color: white;\n  text-align: center;\n  left: calc(50% - 2.5rem);\n  top: calc(50% - 2.5rem);\n  transform: translate3d(0, 0, 0);\n  transition: transform 150ms;\n  transition-timing-function: cubic-bezier(0.48, -0.6, 0.345, 1.295);\n  /* custom */\n}\n\n.main-nav {\n  margin: 50px 0;\n  padding: 0;\n  position: fixed;\n  width: 100%;\n  bottom: 0;\n  height: 9rem;\n}\n\n@media (min-width: 1025px) {\n  .main-nav {\n    bottom: unset;\n  }\n}\n\n.navbar {\n  height: auto;\n  display: inline-block;\n  width: 34.375rem;\n  height: 100%;\n  margin: 0;\n  padding: 10px 0;\n  position: relative;\n  left: 50%;\n  transform: translateX(-50%);\n  filter: url(\"#shadowed-goo\");\n  box-sizing: border-box;\n  font-size: 1.25rem;\n  text-align: left;\n}\n\n.navbar li {\n  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  word-break: break-all;\n  display: flex;\n}\n\n.navbar li a {\n  justify-self: center;\n  align-self: center;\n  width: 100%;\n  text-align: center;\n  font-size: 2.5rem;\n  text-decoration: none;\n}\n\n.navbar li span {\n  width: 1.5625rem;\n  height: 0.1875rem;\n  background: #E7E7E7;\n  display: block;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -0.78125rem;\n  margin-top: -0.09375rem;\n  transition: transform 200ms;\n}\n\n.navbar li span:nth-child(1) {\n  transform: translate3d(0, -0.5rem, 0);\n}\n\n.navbar li span:nth-child(2) {\n  transform: translate3d(0, 0, 0);\n}\n\n.navbar li span:nth-child(3) {\n  transform: translate3d(0, 0.5rem, 0);\n}\n\n.navbar__open-button {\n  z-index: 200;\n  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  /* custom */\n  transition-duration: 400ms;\n  cursor: pointer;\n  line-height: 100%;\n}\n\n.navbar__open-button span {\n  width: 1.5625rem;\n  height: 0.1875rem;\n  background: #E7E7E7;\n  display: block;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -0.78125rem;\n  margin-top: -0.09375rem;\n  transition: transform 200ms;\n}\n\n.navbar__open-button span:nth-child(1) {\n  transform: translate3d(0, -0.5rem, 0);\n}\n\n.navbar__open-button span:nth-child(2) {\n  transform: translate3d(0, 0, 0);\n}\n\n.navbar__open-button span:nth-child(3) {\n  transform: translate3d(0, 0.5rem, 0);\n}\n\n.navbar__open-button .burger-shape {\n  background: #E7E7E7;\n  position: relative;\n  height: 3.125rem;\n  width: 3.125rem;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  clip-path: polygon(0 100%, 0 81%, 51% 75%, 51% 59%, 0 61%, 0 34%, 49% 37%, 49% 18%, 0 22%, 0 0, 100% 0, 100% 22%, 49% 18%, 49% 38%, 100% 46%, 100% 60%, 51% 59%, 51% 76%, 100% 74%, 100% 100%);\n  transition: clip-path 200ms;\n}\n\n@keyframes playMenu {\n  0% {\n    background-position: 0px 0px;\n  }\n  100% {\n    background-position: -4320px 0px;\n  }\n}\n\n.navbar--open li {\n  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n\n.navbar--open li:nth-child(1) {\n  /* left */\n  transition-duration: 730ms;\n  transform: translate3d(-15rem, 1.25rem, 0);\n}\n\n.navbar--open li:nth-child(2) {\n  /* left */\n  transition-duration: 650ms;\n  transform: translate3d(-10rem, 0.625rem, 0);\n}\n\n.navbar--open li:nth-child(3) {\n  /* left */\n  transition-duration: 570ms;\n  transform: translate3d(-5rem, 0rem, 0);\n}\n\n.navbar--open li:nth-child(5) {\n  /* right */\n  transition-duration: 570ms;\n  transform: translate3d(5rem, 0rem, 0);\n}\n\n.navbar--open li:nth-child(6) {\n  /* right */\n  transition-duration: 650ms;\n  transform: translate3d(10rem, 0.625rem, 0);\n}\n\n.navbar--open li:nth-child(7) {\n  /* right */\n  transition-duration: 730ms;\n  transform: translate3d(15rem, 1.25rem, 0);\n}\n\n@media (min-width: 1025px) {\n  .navbar--open li:nth-child(1) {\n    /* left */\n    transition-duration: 730ms;\n    transform: translate3d(-15rem, -1.25rem, 0);\n  }\n  .navbar--open li:nth-child(2) {\n    /* left */\n    transition-duration: 650ms;\n    transform: translate3d(-10rem, -0.625rem, 0);\n  }\n  .navbar--open li:nth-child(3) {\n    /* left */\n    transition-duration: 570ms;\n    transform: translate3d(-5rem, 0rem, 0);\n  }\n  .navbar--open li:nth-child(5) {\n    /* right */\n    transition-duration: 570ms;\n    transform: translate3d(5rem, 0rem, 0);\n  }\n  .navbar--open li:nth-child(6) {\n    /* right */\n    transition-duration: 650ms;\n    transform: translate3d(10rem, -0.625rem, 0);\n  }\n  .navbar--open li:nth-child(7) {\n    /* right */\n    transition-duration: 730ms;\n    transform: translate3d(15rem, -1.25rem, 0);\n  }\n}\n\n.navbar--open .navbar__open-button {\n  /* custom */\n  transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);\n  transition-duration: 400ms;\n  transform: scale(0.85, 0.85) translate3d(0, 0, 0);\n  background: #8abff7;\n}\n\n.navbar--open .navbar__open-button span:nth-child(1) {\n  transform: translate3d(0, 0, 0) rotate(45deg);\n}\n\n.navbar--open .navbar__open-button span:nth-child(2) {\n  transform: translate3d(0, 0, 0) scale(0.1, 1);\n}\n\n.navbar--open .navbar__open-button span:nth-child(3) {\n  transform: translate3d(0, 0, 0) rotate(-45deg);\n}\n\n.navbar--open .navbar__open-button .burger-shape {\n  transition: clip-path 500ms;\n  clip-path: polygon(40% 100%, 23% 96%, 11% 85%, 3% 68%, 1% 50%, 5% 33%, 13% 19%, 24% 10%, 37% 4%, 55% 3%, 73% 7%, 90% 18%, 96% 34%, 100% 45%, 99% 60%, 95% 76%, 86% 87%, 75% 96%, 61% 100%, 100% 100%);\n}\n\n.footer {\n  display: grid;\n  grid-gap: 2.2rem;\n  grid-template-columns: 1fr;\n  padding: 2.2rem;\n  background: steelblue;\n}\n\n@media (min-width: 769px) {\n  .footer {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@media (min-width: 1025px) {\n  .footer {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n}\n\n.footer__nav ul,\n.footer__subnav ul {\n  display: flex;\n  flex-direction: column;\n}\n\n.footer__nav ul a,\n.footer__subnav ul a {\n  color: #111;\n  font-weight: 300;\n}\n\n.footer form {\n  display: flex;\n  flex-direction: column;\n}\n\n.footer form input[type=email],\n.footer form select {\n  width: 100%;\n  padding: .4rem .6rem;\n  border: .1rem solid #ccc;\n  border-radius: .1rem;\n  box-sizing: border-box;\n  margin-bottom: 1rem;\n}\n\n.footer form label {\n  padding: .2rem .4rem;\n  color: #333;\n  font-weight: 300;\n}\n\n.footer form input[type=submit] {\n  background-color: tomato;\n  margin: .5rem 0 0 0;\n  align-self: center;\n}\n\n.cards {\n  display: grid;\n  grid-template-columns: 1fr;\n  background: green;\n  grid-gap: 2rem;\n  padding: 2rem;\n}\n\n@media (min-width: 401px) {\n  .cards {\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    grid-gap: 2.2rem;\n    padding: 4.4rem;\n  }\n}\n\n.card {\n  display: flex;\n  flex-direction: column;\n  background: #eee;\n  border-radius: 0.2rem;\n}\n\n.card figure {\n  border-radius: 0.2rem 0.2rem 0 0;\n  display: block;\n  width: 100%;\n  height: auto;\n  position: relative;\n  padding: 66% 0 0 0;\n  /* 34.37% = 100 / (w / h) = 100 / (640 / 220) */\n}\n\n.card figure .off {\n  position: absolute;\n  top: 8%;\n  left: -.5rem;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 0 0.2rem 0.2rem 0;\n  font-size: 18px;\n  background: yellow;\n  color: black;\n  padding: .25rem 1rem;\n}\n\n.card figure img {\n  border-radius: 0.2rem 0.2rem 0 0;\n  display: block;\n  width: 100%;\n  max-height: 100%;\n  height: auto;\n  object-fit: cover;\n  object-position: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.card__title {\n  text-align: center;\n  font-size: 25px;\n  margin: .6rem;\n  letter-spacing: .2rem;\n}\n\n.card__content {\n  padding: 0 2rem;\n  font-size: 16px;\n  flex-grow: 1;\n}\n\n.card hr {\n  width: calc(100% - 4rem);\n  margin: 0 2rem;\n  opacity: .17;\n}\n\n.card div {\n  display: flex;\n  justify-content: space-between;\n  background: steelblue;\n  padding: 1rem;\n  border-radius: 0.2rem;\n  transform: scale(1.02);\n}\n\n.card__price {\n  color: white;\n  font-weight: 300;\n  align-self: center;\n  font-size: 18px;\n}\n\n.card__price-discount {\n  padding: 0 .2rem;\n  font-size: 16px;\n  align-self: center;\n  text-decoration: line-through;\n  color: red;\n}\n\n.card__button {\n  background: firebrick;\n  font-size: 14px;\n  font-weight: 300;\n}\n","// $menu-color: #bada55;\r\n$menu-color: kidColor('4', $kid-color-theme3);\r\n\r\n// $menu-active-color: #fada77;\r\n$menu-active-color: tint(kidColor('1', $kid-color-theme2), 50%);\r\n\r\n// $burger-color: rgb(48, 77, 116);\r\n$burger-color: kidColor('3', $kid-color-theme2);\r\n\r\n$menu-items: 6;\r\n\r\n$menu-item-size: 80px;\r\n\r\n$menu-item-gap: 0px;\r\n\r\n$burger-size: $menu-item-size / 2 + 10px;\r\n\r\n$pix-dir: 10px;\r\n\r\n$start-at-menu: true;\r\n\r\n// body {\r\n//     // background: #999\r\n// }\r\n\r\n.filler {\r\n    height: 100vh;\r\n}\r\n\r\n// @font-face {\r\n//     font-family: 'Noto Color Emoji';\r\n//     src: local('Noto Color Emoji'),\r\n//            url(\"../font/NotoColorEmoji.ttf\") format(\"ttf\");\r\n// }\r\n\r\n// @font-face {\r\n//     font-family: MyHelvetica;\r\n//     src: local(\"Helvetica Neue Bold\"),\r\n//          local(\"HelveticaNeue-Bold\"),\r\n//          url(MgOpenModernaBold.ttf);\r\n//     font-weight: bold;\r\n//   }\r\n\r\n%ball {\r\n    background-color: $menu-color;\r\n    border-radius: 100%;\r\n    // width: px2rem(80px);\r\n    // height: px2rem(80px);\r\n    width: px2rem($menu-item-size);\r\n    height: px2rem($menu-item-size);\r\n    position: absolute;\r\n    color: white;\r\n    text-align: center;\r\n    left: calc(50% - #{px2rem($menu-item-size / 2)});\r\n    top: calc(50% - #{px2rem($menu-item-size / 2)});\r\n    transform: translate3d(0, 0, 0);\r\n    transition: transform 150ms;\r\n    transition-timing-function: cubic-bezier(0.480, -0.600, 0.345, 1.295);\r\n    /* custom */\r\n}\r\n\r\n\r\n.main-nav {\r\n    margin: 50px 0;\r\n    padding: 0;\r\n    // width: 100%;\r\n    position: fixed;\r\n    width: 100%;\r\n    bottom: 0;\r\n    height: px2rem($menu-item-size * 1.8);\r\n\r\n    // $min-width: $tablet-width;\r\n    // $max-width: $desktop-width;\r\n    // $min-font: 12px;\r\n    // $max-font: 20px;\r\n    // @include fluid-font($min-width, $max-width, $min-font, $max-font);\r\n\r\n    @include media('>desktop') {\r\n        bottom: unset;\r\n    }\r\n}\r\n\r\n.navbar {\r\n\r\n    height: auto;\r\n    display: inline-block;\r\n    width: px2rem(($menu-item-size * ($menu-items + 1) - 10px));\r\n    // width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 10px 0;\r\n    position: relative;\r\n    // left: calc(50% - #{px2rem(($menu-item-size * $menu-items + 1) / 2)});\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    filter: url('#shadowed-goo');\r\n    box-sizing: border-box;\r\n    font-size: px2rem(20px);\r\n    text-align: left;\r\n\r\n\r\n    li {\r\n        @extend %ball;\r\n        transition-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1.275);\r\n        // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\r\n        word-break: break-all;\r\n        display: flex;\r\n\r\n        a {\r\n            // line-height: 100%;\r\n            justify-self: center;\r\n            align-self: center;\r\n            width: 100%;\r\n            // height: 100%;\r\n            text-align: center;\r\n            font-size: px2rem($menu-item-size / 2);\r\n            // font-size: 100%;\r\n            text-decoration: none;\r\n        }\r\n\r\n        span {\r\n            $width: 25px;\r\n            $height: 3px;\r\n            width: px2rem($width);\r\n            height: px2rem($height);\r\n            background: $burger-color;\r\n            display: block;\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: px2rem(-$width/2);\r\n            margin-top: px2rem(-$height/2);\r\n            transition: transform 200ms;\r\n\r\n            &:nth-child(1) {\r\n                transform: translate3d(0, px2rem(-8px), 0);\r\n            }\r\n\r\n            &:nth-child(2) {\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n\r\n            &:nth-child(3) {\r\n                transform: translate3d(0, px2rem(8px), 0);\r\n            }\r\n        }\r\n\r\n        // .burger-shape {\r\n\r\n        //     background: $burger-color;\r\n        //     position: relative;\r\n        //     height: px2rem($burger-size);\r\n        //     width: px2rem($burger-size);\r\n        //     top: 50%;\r\n        //     left: 50%;\r\n        //     transform: translate(-50%, -50%);\r\n        //     clip-path: polygon(0 100%, 0 81%, 51% 75%, 51% 59%, 0 61%, 0 34%, 49% 37%, 49% 18%, 0 22%, 0 0, 100% 0, 100% 22%, 49% 18%, 49% 38%, 100% 46%, 100% 60%, 51% 59%, 51% 76%, 100% 74%, 100% 100%);\r\n        //     transition: clip-path 200ms;\r\n        // }\r\n\r\n        // @for $i from 1 through $menu-items {\r\n        //     @if not $i == ($menu-items / 2 + 1) {\r\n        //         &:nth-child(#{$i}) {\r\n        //             transition-duration: 200ms;\r\n        //         }\r\n        //     }\r\n        // }\r\n        @for $i from 1 through $menu-items {\r\n            @if not $i == ($menu-items / 2 + 1) {\r\n                &:nth-child(#{$i}) {\r\n                    transition-duration: 200ms;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // .navbar__open-button {\r\n    &__open-button {\r\n        @extend %ball;\r\n        // transition-timing-function:cubic-bezier(0.175, 0.885, 0.320, 1.275);\r\n        z-index: 200;\r\n        // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580);\r\n        transition-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1.275);\r\n        /* custom */\r\n        transition-duration: 400ms;\r\n        // transform:scale(1.1,1.1) translate3d(0,0,0);\r\n        cursor: pointer;\r\n        line-height: 100%;\r\n    \r\n        span {\r\n            $width: 25px;\r\n            $height: 3px;\r\n            width: px2rem($width);\r\n            height: px2rem($height);\r\n            background: $burger-color;\r\n            display: block;\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: px2rem(-$width/2);\r\n            margin-top: px2rem(-$height/2);\r\n            transition: transform 200ms;\r\n    \r\n            &:nth-child(1) {\r\n                transform: translate3d(0, px2rem(-8px), 0);\r\n            }\r\n    \r\n            &:nth-child(2) {\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n    \r\n            &:nth-child(3) {\r\n                transform: translate3d(0, px2rem(8px), 0);\r\n            }\r\n        }\r\n    \r\n        .burger-shape {\r\n    \r\n            background: $burger-color;\r\n            position: relative;\r\n            height: px2rem($burger-size);\r\n            width: px2rem($burger-size);\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            clip-path: polygon(0 100%, 0 81%, 51% 75%, 51% 59%, 0 61%, 0 34%, 49% 37%, 49% 18%, 0 22%, 0 0, 100% 0, 100% 22%, 49% 18%, 49% 38%, 100% 46%, 100% 60%, 51% 59%, 51% 76%, 100% 74%, 100% 100%);\r\n            transition: clip-path 200ms;\r\n        }\r\n    }\r\n}\r\n\r\n// .logo {\r\n\r\n// .playMenu {\r\n//     background-color: $menu-active-color;\r\n\r\n//     svg {\r\n\r\n//         path#top,\r\n//         path#bottom {\r\n//             stroke-dashoffset: -650px;\r\n//             stroke-dashoffset: -650px;\r\n//         }\r\n\r\n//         path#middle {\r\n//             stroke-dashoffset: -115px;\r\n//             stroke-dasharray: 1px 220px;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n@keyframes playMenu {\r\n    0% {\r\n        background-position: 0px 0px;\r\n    }\r\n\r\n    100% {\r\n        background-position: -4320px 0px;\r\n    }\r\n}\r\n\r\n// $real-menu-items: $menu-items + 1;\r\n.navbar--open {\r\n    li {\r\n        // transition-timing-function: cubic-bezier(0.480, -0.600, 0.345, 1.295);\r\n        transition-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1.275);\r\n\r\n        @for $i from 1 through $menu-items+1 {\r\n            @if $i <= ($menu-items / 2) {\r\n                &:nth-child(#{$i}) {\r\n                    /* left */\r\n\r\n                    transition-duration: 250ms + (80ms * abs(($i + 0) - ($menu-items + 1)));\r\n\r\n                    // transform: translate3d(px2rem($menu-item-size * (($i - 1 + $menu-items / 2) - $menu-items)), px2rem(-((10px * (($i - 1 + $menu-items / 2) - $menu-items) + 10px))), 0);\r\n                    @if $start-at-menu {\r\n                        transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * (($i - 1 + $menu-items / 2) - $menu-items)),\r\n                            px2rem(-(($pix-dir * (($i - 1 + $menu-items / 2) - $menu-items) + $pix-dir))), 0);\r\n                    }\r\n\r\n                    @else {\r\n                        transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * (($i - 1 + $menu-items / 2) - $menu-items)),\r\n                            px2rem(-(($pix-dir * (($i - 1 + $menu-items / 2) - $menu-items)))), 0);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @else {\r\n                @if $i > ($menu-items / 2 + 1) {\r\n                    &:nth-child(#{$i}) {\r\n                        /* right */\r\n                        transition-duration: 250ms + (80ms * ($i - 1));\r\n\r\n                        // transform: translate3d(px2rem($menu-item-size * ($i - ($menu-items / 2 + 1))), px2rem((10px * ($i - ($menu-items / 2 + 1))) - 10px), 0);\r\n                        @if $start-at-menu {\r\n                            transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * ($i - ($menu-items / 2 + 1))),\r\n                                px2rem(($pix-dir * ($i - ($menu-items / 2 + 1))) - $pix-dir), 0);\r\n                        }\r\n\r\n                        @else {\r\n                            transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * ($i - ($menu-items / 2 + 1))),\r\n                                px2rem(($pix-dir * ($i - ($menu-items / 2 + 1)))), 0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @include media('>desktop') {\r\n            $pix-dir: -$pix-dir;\r\n\r\n            @for $i from 1 through $menu-items+1 {\r\n                @if $i <= ($menu-items / 2) {\r\n                    &:nth-child(#{$i}) {\r\n                        /* left */\r\n\r\n                        transition-duration: 250ms + (80ms * abs(($i + 0) - ($menu-items + 1)));\r\n\r\n                        // transform: translate3d(px2rem($menu-item-size * (($i - 1 + $menu-items / 2) - $menu-items)), px2rem(-((10px * (($i - 1 + $menu-items / 2) - $menu-items) + 10px))), 0);\r\n                        @if $start-at-menu {\r\n                            transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * (($i - 1 + $menu-items / 2) - $menu-items)),\r\n                                px2rem(-(($pix-dir * (($i - 1 + $menu-items / 2) - $menu-items) + $pix-dir))), 0);\r\n                        }\r\n\r\n                        @else {\r\n                            transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * (($i - 1 + $menu-items / 2) - $menu-items)),\r\n                                px2rem(-(($pix-dir * (($i - 1 + $menu-items / 2) - $menu-items)))), 0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @else {\r\n                    @if $i > ($menu-items / 2 + 1) {\r\n                        &:nth-child(#{$i}) {\r\n                            /* right */\r\n                            transition-duration: 250ms + (80ms * ($i - 1));\r\n\r\n                            // transform: translate3d(px2rem($menu-item-size * ($i - ($menu-items / 2 + 1))), px2rem((10px * ($i - ($menu-items / 2 + 1))) - 10px), 0);\r\n                            @if $start-at-menu {\r\n                                transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * ($i - ($menu-items / 2 + 1))),\r\n                                    px2rem(($pix-dir * ($i - ($menu-items / 2 + 1))) - $pix-dir), 0);\r\n                            }\r\n\r\n                            @else {\r\n                                transform: translate3d(px2rem(($menu-item-size + $menu-item-gap) * ($i - ($menu-items / 2 + 1))),\r\n                                    px2rem(($pix-dir * ($i - ($menu-items / 2 + 1)))), 0);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // .logo {\r\n    .navbar__open-button {\r\n        // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580);\r\n        /* custom */\r\n        // transition-timing-function: cubic-bezier(0.480, -0.600, 0.515, 1.580); /* custom */\r\n        // transition-timing-function: cubic-bezier(0.1, -0.1, 0.345, 1.295);\r\n        transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);\r\n\r\n\r\n\r\n        transition-duration: 400ms;\r\n        // transform:scale(0.8,0.8) translate3d(0,0,0);\r\n        // transform:scale(0.85,0.85) translate3d(0, px2rem(-10px),0);\r\n        transform: scale(0.85, 0.85) translate3d(0, 0, 0);\r\n        background: $menu-active-color;\r\n\r\n        // &:hover {\r\n        //   color: red;\r\n        // }\r\n        span {\r\n            &:nth-child(1) {\r\n                transform: translate3d(0, 0, 0) rotate(45deg);\r\n            }\r\n\r\n            &:nth-child(2) {\r\n                transform: translate3d(0, 0, 0) scale(0.1, 1);\r\n            }\r\n\r\n            &:nth-child(3) {\r\n                transform: translate3d(0, 0, 0) rotate(-45deg);\r\n            }\r\n        }\r\n\r\n        .burger-shape {\r\n            transition: clip-path 500ms;\r\n            // clip-path: polygon(0 100%, 0 83%, 0 72%, 0 70%, 0 55%, 0 44%, 0 35%, 0 22%, 0 15%, 0 0, 100% 0, 100% 15%, 100% 21%, 100% 33%, 100% 46%, 100% 56%, 100% 61%, 100% 69%, 100% 80%, 100% 100%);\r\n            // clip-path: polygon(\r\n            //     0 100%, \r\n            //     0 83%, \r\n            //     0 72%,\r\n            //     0 70%, \r\n            //     0 55%, \r\n            //     0 44%, \r\n            //     0 35%, \r\n            //     0 22%, \r\n            //     0 15%, \r\n            //     0 0, \r\n            //     100% 0, \r\n            //     100% 15%, \r\n            //     100% 21%, \r\n            //     100% 33%, \r\n            //     100% 46%, \r\n            //     100% 56%, \r\n            //     100% 61%, \r\n            //     100% 69%, \r\n            //     100% 80%, \r\n            //     100% 100%);\r\n            clip-path: polygon(40% 100%,\r\n                23% 96%,\r\n                11% 85%,\r\n                3% 68%,\r\n                1% 50%,\r\n                5% 33%,\r\n                13% 19%,\r\n                24% 10%,\r\n                37% 4%,\r\n                55% 3%,\r\n                73% 7%,\r\n                90% 18%,\r\n                96% 34%,\r\n                100% 45%,\r\n                99% 60%,\r\n                95% 76%,\r\n                86% 87%,\r\n                75% 96%,\r\n                61% 100%,\r\n                100% 100%);\r\n        }\r\n    }\r\n}","@function strip-unit($number) {\r\n    @if type-of($number) == 'number' and not unitless($number) {\r\n        @return $number / ($number * 0 + 1);\r\n    }\r\n    @return $number;\r\n}\r\n\r\n@function px2rem($px, $root-px: 16) {\r\n    $value: strip-unit($px);\r\n    $root-value: strip-unit($root-px);\r\n    @return $value / $root-value + rem;\r\n}\r\n\r\n@function converter($val, $mp-val: 1, $mp: 1, $unit: null) {\r\n    $value: strip-unit($val);\r\n    $divider: strip-unit($mp-val);\r\n    @if $unit == null {\r\n        $unit: '';\r\n    }\r\n\r\n    @if $divider == 0 {\r\n        $divider: 1\r\n    }\r\n\r\n    @if $divider < 0 {\r\n        @return unquote($value / $divider + $unit);\r\n    } @else {\r\n        @return unquote($value * $divider + $unit);\r\n    }\r\n}\r\n\r\n@function to-unit($val, $unit: null) {\r\n    // @if type-of($unit) not 'string' and {\r\n    @if $unit and unitless($val) and type-of($val) == 'number' {\r\n        // @return strip-unit($val) + #{$unit};\r\n        @return unquote(strip-unit($val) + $unit);\r\n    }\r\n    \r\n    @return $val;\r\n}\r\n\r\n@mixin square-element($size) {\r\n    @if ($size == null) or (type-of($size) != number) {\r\n        @warn 'should be a number';\r\n    } \r\n    max-width: $size; \r\n    min-height: $size;\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//                http://include-media.com\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px,\r\n) !default;\r\n\r\n@function getBp($bp) {\r\n  @if not map-has-key($map: $breakpoints, $key: $bp) {\r\n    @warn 'Breakpoint not found. Breakpoints available: #{map-keys($map: $breakpoints)}.';\r\n    @return $bp;\r\n  }\r\n  @return map-get($map: $breakpoints, $key: #{$bp});\r\n}\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/// Slightly lighten a color, \r\n/// inverted for Ubuntu design compatibility.\r\n/// @access public\r\n/// @param {Color} $color - color to tint\r\n/// @param {Number} $percentage - percentage of `$color` in returned color\r\n/// @return {Color} - \r\n@function tint($color, $percentage) {\r\n    @return mix($color, white, $percentage);\r\n    // @return mix(white, $color, $percentage);\r\n}\r\n\r\n/// Slightly darken a color\r\n/// @access public\r\n/// @param {Color} $color - color to shade\r\n/// @param {Number} $percentage - percentage of `$color` in returned color\r\n/// @return {Color} -\r\n@function shade($color, $percentage) {\r\n    @return mix(black, $color, $percentage);\r\n}\r\n\r\n/// Slightly lighten a color\r\n/// @access public\r\n/// @param {Color} $color - color to tint\r\n/// @param {Number} $percentage - percentage of `$color` in returned color\r\n/// @return {Color} -\r\n@function org-tint($color, $percentage) {\r\n    @return mix(white, $color, $percentage);\r\n}\r\n",".footer {\r\n    @include grid3;\r\n    padding: $spacing;\r\n    background: steelblue;\r\n\r\n    &__nav ul,\r\n    &__subnav ul {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        & a {\r\n            color: $color__primary;\r\n            font-weight: 300;\r\n        }\r\n    }\r\n\r\n    form {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        input[type=email],\r\n        select {\r\n            width: 100%;\r\n            padding: .4rem .6rem;\r\n            border: .1rem solid #ccc;\r\n            border-radius: .1rem;\r\n            box-sizing: border-box;\r\n            margin-bottom: 1rem;\r\n        }\r\n\r\n        label {\r\n            padding: .2rem .4rem;\r\n            color: $color__secoundary;\r\n            font-weight: 300;\r\n        }\r\n\r\n        input[type=submit] {\r\n            @extend %button;\r\n            background-color: tomato;\r\n            margin: .5rem 0 0 0;\r\n            // width: 80%;\r\n            align-self: center;\r\n            // margin: 16px 0 0 0;\r\n        }\r\n    }\r\n}","\r\n// @mixin grid3($gap){\r\n//     display: grid;\r\n//     gap: $gap;\r\n//     grid-template-columns: 1fr;\r\n//     @include media('>phone'){\r\n//         grid-template-columns: repeat(3, 1fr);\r\n//     }\r\n// }\r\n@mixin grid3{\r\n    display: grid;\r\n    grid-gap: $spacing;\r\n    grid-template-columns: 1fr;\r\n    @include media('>tablet'){\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n    @include media('>desktop'){\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n    }\r\n}\r\n\r\n@mixin grid4($gap){\r\n    display: grid;\r\n    gap: $gap;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    @include mq-phone{\r\n        grid-template-columns: 1fr;\r\n    }\r\n    @include mq-tablet{\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n}\r\n\r\n@mixin grid12($gap){\r\n    display: grid;\r\n    gap: $gap;\r\n    grid-template-columns: repeat(12, 1fr);\r\n}\r\n\r\n@mixin makeGrid($col, $gap) {\r\n    @if $col==3 {\r\n        @include grid3($gap);\r\n    }\r\n    @if $col==4 {\r\n        @include grid4($gap);\r\n    }\r\n    @if $col==12 {\r\n        @include grid12($gap);\r\n    }\r\n    @else {\r\n        @warn 'invalid number of grid, you fucking n00b!';\r\n    }\r\n}\r\n\r\n$grid-gap: 16px !default;\r\n\r\n@mixin mkGrid($col, $gap: $grid-gap) {\r\n    display: grid;\r\n    grid-template-columns: repeat(#{$col}, 1fr);\r\n    \r\n    @if not $gap == false {\r\n        gap: $gap;\r\n    }\r\n\r\n\r\n    @include mq-phone{\r\n        grid-template-columns: 1fr;\r\n    }\r\n    @include mq-tablet{\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n}\r\n\r\n",".cards {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    background: green;\r\n    grid-gap: $smallspacing;\r\n    padding: $smallspacing;\r\n\r\n    @include media('>phone') {\r\n        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n        grid-gap: $spacing;\r\n        padding: $spacing * 2;\r\n    }\r\n}\r\n\r\n.card {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: #eee;\r\n\r\n\r\n    \r\n    border-radius: $cards__border-radius;\r\n    // box-shadow: 0 5px 15px -3px rgba(44, 44, 44, 0.234);\r\n    // padding: 1rem;\r\n\r\n    figure {\r\n        border-radius: $cards__border-radius $cards__border-radius 0 0;\r\n        display: block;\r\n        width: 100%;\r\n        height: auto;\r\n\r\n\r\n\r\n\r\n        position: relative;\r\n        // overflow: hidden;\r\n        padding: 66% 0 0 0;\r\n\r\n        /* 34.37% = 100 / (w / h) = 100 / (640 / 220) */\r\n        .off {\r\n            position: absolute;\r\n            top: 8%;\r\n            left: -.5rem;\r\n            border: 1px solid rgba(0, 0, 0, .3);\r\n            border-radius: 0 $cards__border-radius $cards__border-radius 0;\r\n            // font-size: 1rem;\r\n            font-size: 18px;\r\n            background: yellow;\r\n            color: black;\r\n            padding: .25rem 1rem;\r\n        }\r\n\r\n        img {\r\n            border-radius: $cards__border-radius $cards__border-radius 0 0;\r\n            display: block;\r\n            width: 100%;\r\n            max-height: 100%;\r\n            height: auto;\r\n            object-fit: cover;\r\n            object-position: center;\r\n            position: absolute;\r\n            top: 0;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n        }\r\n    }\r\n\r\n    &__title {\r\n        text-align: center;\r\n        // font-size: 1.8rem;\r\n        font-size: 25px;\r\n        margin: .6rem;\r\n        letter-spacing: .2rem;\r\n    }\r\n\r\n    &__content {\r\n        padding: 0 $smallspacing;\r\n        // font-size: 1rem;\r\n        font-size: 16px;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    hr {\r\n        width: calc(100% - #{$smallspacing * 2});\r\n        margin: 0 $smallspacing;\r\n        opacity: .17;\r\n    }\r\n\r\n    div {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        background: steelblue;\r\n        padding: 1rem;\r\n        // border-radius: 0 0 $cards__border-radius $cards__border-radius;\r\n        border-radius: $cards__border-radius;\r\n        transform: scale(1.02);\r\n    }\r\n\r\n    &__price {\r\n        color: white;\r\n        font-weight: 300;\r\n        align-self: center;\r\n        // font-size: 1.2rem;\r\n        font-size: 18px;\r\n\r\n        &-discount {\r\n            padding: 0 .2rem;\r\n            // font-size: 1rem;\r\n            font-size: 16px;\r\n            align-self: center;\r\n            text-decoration: line-through;\r\n            color: red;\r\n        }\r\n    }\r\n\r\n\r\n    &__button {\r\n        @extend %button;\r\n        background: firebrick;\r\n        // font-size: .8rem;\r\n        font-size: 14px;\r\n        font-weight: 300;\r\n    }\r\n}"]}